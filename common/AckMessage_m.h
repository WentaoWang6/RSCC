//
// Generated file, do not edit! Created by nedtool 5.2 from common/AckMessage.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __MINE_ACKMESSAGE_M_H
#define __MINE_ACKMESSAGE_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0502
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif


namespace mine {

/**
 * Class generated from <tt>common/AckMessage.msg:19</tt> by nedtool.
 * <pre>
 * packet AckMessage
 * {
 *     uint32_t flowId;
 *     uint32_t destAddress;
 *     uint32_t expectedSeq;
 *     uint32_t sackNo;
 *     bool ack;
 *     bool lastPkt;
 *     bool dupAck; // local use only
 * }
 * </pre>
 */
class AckMessage : public ::omnetpp::cPacket
{
  protected:
    uint32_t flowId;
    uint32_t destAddress;
    uint32_t expectedSeq;
    uint32_t sackNo;
    bool ack;
    bool lastPkt;
    bool dupAck;

  private:
    void copy(const AckMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const AckMessage&);

  public:
    AckMessage(const char *name=nullptr, short kind=0);
    AckMessage(const AckMessage& other);
    virtual ~AckMessage();
    AckMessage& operator=(const AckMessage& other);
    virtual AckMessage *dup() const override {return new AckMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual uint32_t getFlowId() const;
    virtual void setFlowId(uint32_t flowId);
    virtual uint32_t getDestAddress() const;
    virtual void setDestAddress(uint32_t destAddress);
    virtual uint32_t getExpectedSeq() const;
    virtual void setExpectedSeq(uint32_t expectedSeq);
    virtual uint32_t getSackNo() const;
    virtual void setSackNo(uint32_t sackNo);
    virtual bool getAck() const;
    virtual void setAck(bool ack);
    virtual bool getLastPkt() const;
    virtual void setLastPkt(bool lastPkt);
    virtual bool getDupAck() const;
    virtual void setDupAck(bool dupAck);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const AckMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, AckMessage& obj) {obj.parsimUnpack(b);}

} // namespace mine

#endif // ifndef __MINE_ACKMESSAGE_M_H

