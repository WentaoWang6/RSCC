//
// Generated file, do not edit! Created by nedtool 5.2 from common/BufferUsage.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __MINE_BUFFERUSAGE_M_H
#define __MINE_BUFFERUSAGE_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0502
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif


namespace mine {

/**
 * Class generated from <tt>common/BufferUsage.msg:19</tt> by nedtool.
 * <pre>
 * packet BufferUsage
 * {
 *     int portNum; // ingress port number
 *     int usage;   // usage in bytes; +ve if allocated and -ve if released
 * }
 * </pre>
 */
class BufferUsage : public ::omnetpp::cPacket
{
  protected:
    int portNum;
    int usage;

  private:
    void copy(const BufferUsage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const BufferUsage&);

  public:
    BufferUsage(const char *name=nullptr, short kind=0);
    BufferUsage(const BufferUsage& other);
    virtual ~BufferUsage();
    BufferUsage& operator=(const BufferUsage& other);
    virtual BufferUsage *dup() const override {return new BufferUsage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getPortNum() const;
    virtual void setPortNum(int portNum);
    virtual int getUsage() const;
    virtual void setUsage(int usage);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const BufferUsage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, BufferUsage& obj) {obj.parsimUnpack(b);}

} // namespace mine

#endif // ifndef __MINE_BUFFERUSAGE_M_H

